{"version":3,"file":"implementation.js","sourceRoot":"","sources":["../../src/implementation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AA8IjD,MAAM,mBAAmB,GAAG,cAAc,CACxC,qBAAqB,EACrB;IACE,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,sBAAsB,EAAE,CAAC;CACrE,CACF,CAAC;AAEF,mBAAmB,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,EAAE;;IACrD,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACjB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAEjB,MAAM,IAAI,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAuB,CAAC;IACnE,MAAM,UAAU,SAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,UAAU,CAAC;IAC7C,MAAM,UAAU,GAAG,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC;IAE7C,mBAAmB,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;AAC9E,CAAC,CAAC,CAAC;AAEH,OAAO,EAAE,mBAAmB,EAAE,CAAC","sourcesContent":["import type { Plugin } from '@capacitor/core';\nimport { registerPlugin } from '@capacitor/core';\n\nimport type {\n  CameraConfig,\n  GoogleMapConfig,\n  LatLng,\n  LatLngBounds,\n  MapPadding,\n  MapType,\n  Marker,\n} from './definitions';\n\n/**\n * An interface containing the options used when creating a map.\n */\nexport interface CreateMapArgs {\n  /**\n   * A unique identifier for the map instance.\n   */\n  id: string;\n  /**\n   * The Google Maps SDK API Key.\n   */\n  apiKey: string;\n  /**\n   * The initial configuration settings for the map.\n   */\n  config: GoogleMapConfig;\n  /**\n   * The DOM element that the Google Map View will be mounted on which determines size and positioning.\n   */\n  element: HTMLElement;\n  /**\n   * Destroy and re-create the map instance if a map with the supplied id already exists\n   * @default false\n   */\n  forceCreate?: boolean;\n}\n\nexport interface DestroyMapArgs {\n  id: string;\n}\n\nexport interface RemoveMarkerArgs {\n  id: string;\n  markerId: string;\n}\n\nexport interface RemoveMarkersArgs {\n  id: string;\n  markerIds: string[];\n}\n\nexport interface AddMarkerArgs {\n  id: string;\n  marker: Marker;\n}\n\nexport interface CameraArgs {\n  id: string;\n  config: CameraConfig;\n}\n\nexport interface MapTypeArgs {\n  id: string;\n  mapType: MapType;\n}\n\nexport interface IndoorMapArgs {\n  id: string;\n  enabled: boolean;\n}\n\nexport interface TrafficLayerArgs {\n  id: string;\n  enabled: boolean;\n}\n\nexport interface AccElementsArgs {\n  id: string;\n  enabled: boolean;\n}\n\nexport interface PaddingArgs {\n  id: string;\n  padding: MapPadding;\n}\n\nexport interface CurrentLocArgs {\n  id: string;\n  enabled: boolean;\n}\nexport interface AddMarkersArgs {\n  id: string;\n  markers: Marker[];\n}\n\nexport interface OnScrollArgs {\n  id: string;\n  mapBounds: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\nexport interface MapBoundsContainsArgs {\n  bounds: LatLngBounds;\n  point: LatLng;\n}\n\nexport interface EnableClusteringArgs {\n  id: string;\n  minClusterSize?: number;\n}\n\nexport interface CapacitorGoogleMapsPlugin extends Plugin {\n  create(options: CreateMapArgs): Promise<void>;\n  addMarker(args: AddMarkerArgs): Promise<{ id: string }>;\n  addMarkers(args: AddMarkersArgs): Promise<{ ids: string[] }>;\n  removeMarker(args: RemoveMarkerArgs): Promise<void>;\n  removeMarkers(args: RemoveMarkersArgs): Promise<void>;\n  enableClustering(args: EnableClusteringArgs): Promise<void>;\n  disableClustering(args: { id: string }): Promise<void>;\n  destroy(args: DestroyMapArgs): Promise<void>;\n  setCamera(args: CameraArgs): Promise<void>;\n  getMapType(args: { id: string }): Promise<{ type: string }>;\n  setMapType(args: MapTypeArgs): Promise<void>;\n  enableIndoorMaps(args: IndoorMapArgs): Promise<void>;\n  enableTrafficLayer(args: TrafficLayerArgs): Promise<void>;\n  enableAccessibilityElements(args: AccElementsArgs): Promise<void>;\n  enableCurrentLocation(args: CurrentLocArgs): Promise<void>;\n  setPadding(args: PaddingArgs): Promise<void>;\n  onScroll(args: OnScrollArgs): Promise<void>;\n  dispatchMapEvent(args: { id: string; focus: boolean }): Promise<void>;\n  getMapBounds(args: { id: string }): Promise<LatLngBounds>;\n  mapBoundsContains(\n    args: MapBoundsContainsArgs,\n  ): Promise<{ contains: boolean }>;\n}\n\nconst CapacitorGoogleMaps = registerPlugin<CapacitorGoogleMapsPlugin>(\n  'CapacitorGoogleMaps',\n  {\n    web: () => import('./web').then(m => new m.CapacitorGoogleMapsWeb()),\n  },\n);\n\nCapacitorGoogleMaps.addListener('isMapInFocus', data => {\n  const x = data.x;\n  const y = data.y;\n\n  const elem = document.elementFromPoint(x, y) as HTMLElement | null;\n  const internalId = elem?.dataset?.internalId;\n  const mapInFocus = internalId === data.mapId;\n\n  CapacitorGoogleMaps.dispatchMapEvent({ id: data.mapId, focus: mapInFocus });\n});\n\nexport { CapacitorGoogleMaps };\n"]}