{"version":3,"file":"map.js","sourceRoot":"","sources":["../../src/map.ts"],"names":[],"mappings":"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","sourcesContent":["import { Capacitor } from '@capacitor/core';\nimport type { PluginListenerHandle } from '@capacitor/core';\n\nimport type {\n  CameraConfig,\n  Marker,\n  MapPadding,\n  MapListenerCallback,\n  MapReadyCallbackData,\n  CameraIdleCallbackData,\n  CameraMoveStartedCallbackData,\n  ClusterClickCallbackData,\n  MapClickCallbackData,\n  MarkerClickCallbackData,\n  MyLocationButtonClickCallbackData,\n} from './definitions';\nimport { LatLngBounds, MapType } from './definitions';\nimport type { CreateMapArgs } from './implementation';\nimport { CapacitorGoogleMaps } from './implementation';\n\nexport interface GoogleMapInterface {\n  create(\n    options: CreateMapArgs,\n    callback?: MapListenerCallback<MapReadyCallbackData>,\n  ): Promise<GoogleMap>;\n  enableClustering(\n    /**\n     * The minimum number of markers that can be clustered together. The default is 4 markers.\n     */\n    minClusterSize?: number,\n  ): Promise<void>;\n  disableClustering(): Promise<void>;\n  addMarker(marker: Marker): Promise<string>;\n  addMarkers(markers: Marker[]): Promise<string[]>;\n  removeMarker(id: string): Promise<void>;\n  removeMarkers(ids: string[]): Promise<void>;\n  destroy(): Promise<void>;\n  setCamera(config: CameraConfig): Promise<void>;\n  /**\n   * Get current map type\n   */\n  getMapType(): Promise<MapType>;\n  setMapType(mapType: MapType): Promise<void>;\n  enableIndoorMaps(enabled: boolean): Promise<void>;\n  enableTrafficLayer(enabled: boolean): Promise<void>;\n  enableAccessibilityElements(enabled: boolean): Promise<void>;\n  enableCurrentLocation(enabled: boolean): Promise<void>;\n  setPadding(padding: MapPadding): Promise<void>;\n  setOnBoundsChangedListener(\n    callback?: MapListenerCallback<CameraIdleCallbackData>,\n  ): Promise<void>;\n  setOnCameraIdleListener(\n    callback?: MapListenerCallback<CameraIdleCallbackData>,\n  ): Promise<void>;\n  setOnCameraMoveStartedListener(\n    callback?: MapListenerCallback<CameraMoveStartedCallbackData>,\n  ): Promise<void>;\n  setOnClusterClickListener(\n    callback?: MapListenerCallback<ClusterClickCallbackData>,\n  ): Promise<void>;\n  setOnClusterInfoWindowClickListener(\n    callback?: MapListenerCallback<ClusterClickCallbackData>,\n  ): Promise<void>;\n  setOnInfoWindowClickListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void>;\n  setOnMapClickListener(\n    callback?: MapListenerCallback<MapClickCallbackData>,\n  ): Promise<void>;\n  setOnMarkerClickListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void>;\n  setOnMarkerDragStartListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void>;\n  setOnMarkerDragListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void>;\n  setOnMarkerDragEndListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void>;\n  setOnMyLocationButtonClickListener(\n    callback?: MapListenerCallback<MyLocationButtonClickCallbackData>,\n  ): Promise<void>;\n  setOnMyLocationClickListener(\n    callback?: MapListenerCallback<MapClickCallbackData>,\n  ): Promise<void>;\n}\n\nclass MapCustomElement extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    if (Capacitor.getPlatform() == 'ios') {\n      this.style.overflow = 'scroll';\n      (this.style as any)['-webkit-overflow-scrolling'] = 'touch';\n\n      const overflowDiv = document.createElement('div');\n      overflowDiv.style.height = '200%';\n\n      this.appendChild(overflowDiv);\n    }\n  }\n}\n\ncustomElements.define('capacitor-google-map', MapCustomElement);\n\nexport class GoogleMap {\n  private id: string;\n  private element: HTMLElement | null = null;\n\n  private onBoundsChangedListener?: PluginListenerHandle;\n  private onCameraIdleListener?: PluginListenerHandle;\n  private onCameraMoveStartedListener?: PluginListenerHandle;\n  private onClusterClickListener?: PluginListenerHandle;\n  private onClusterInfoWindowClickListener?: PluginListenerHandle;\n  private onInfoWindowClickListener?: PluginListenerHandle;\n  private onMapClickListener?: PluginListenerHandle;\n  private onMarkerClickListener?: PluginListenerHandle;\n  private onMarkerDragStartListener?: PluginListenerHandle;\n  private onMarkerDragListener?: PluginListenerHandle;\n  private onMarkerDragEndListener?: PluginListenerHandle;\n  private onMyLocationButtonClickListener?: PluginListenerHandle;\n  private onMyLocationClickListener?: PluginListenerHandle;\n\n  private constructor(id: string) {\n    this.id = id;\n  }\n\n  /**\n   * Creates a new instance of a Google Map\n   * @param options\n   * @param callback\n   * @returns GoogleMap\n   */\n  public static async create(\n    options: CreateMapArgs,\n    callback?: MapListenerCallback<MapReadyCallbackData>,\n  ): Promise<GoogleMap> {\n    const newMap = new GoogleMap(options.id);\n\n    if (!options.element) {\n      throw new Error('container element is required');\n    }\n\n    if (options.config.androidLiteMode === undefined) {\n      options.config.androidLiteMode = false;\n    }\n\n    newMap.element = options.element;\n    newMap.element.dataset.internalId = options.id;\n\n    const elementBounds = await GoogleMap.getElementBounds(options.element);\n    options.config.width = elementBounds.width;\n    options.config.height = elementBounds.height;\n    options.config.x = elementBounds.x;\n    options.config.y = elementBounds.y;\n    options.config.devicePixelRatio = window.devicePixelRatio;\n\n    if (Capacitor.getPlatform() == 'android') {\n      newMap.initScrolling();\n    }\n\n    if (Capacitor.isNativePlatform()) {\n      (options.element as any) = {};\n    }\n\n    await CapacitorGoogleMaps.create(options);\n\n    if (callback) {\n      const onMapReadyListener = await CapacitorGoogleMaps.addListener(\n        'onMapReady',\n        (data: MapReadyCallbackData) => {\n          if (data.mapId == newMap.id) {\n            callback(data);\n            onMapReadyListener.remove();\n          }\n        },\n      );\n    }\n\n    return newMap;\n  }\n\n  private static async getElementBounds(\n    element: HTMLElement,\n  ): Promise<DOMRect> {\n    return new Promise(resolve => {\n      let elementBounds = element.getBoundingClientRect();\n      if (elementBounds.width == 0) {\n        let retries = 0;\n        const boundsInterval = setInterval(function () {\n          if (elementBounds.width == 0 && retries < 30) {\n            elementBounds = element.getBoundingClientRect();\n            retries++;\n          } else {\n            if (retries == 30) {\n              console.warn('Map size could not be determined');\n            }\n            clearInterval(boundsInterval);\n            resolve(elementBounds);\n          }\n        }, 100);\n      } else {\n        resolve(elementBounds);\n      }\n    });\n  }\n\n  /**\n   * Enable marker clustering\n   *\n   * @param minClusterSize - The minimum number of markers that can be clustered together.\n   * @defaultValue 4\n   *\n   * @returns void\n   */\n  async enableClustering(minClusterSize?: number): Promise<void> {\n    return CapacitorGoogleMaps.enableClustering({\n      id: this.id,\n      minClusterSize,\n    });\n  }\n\n  /**\n   * Disable marker clustering\n   *\n   * @returns void\n   */\n  async disableClustering(): Promise<void> {\n    return CapacitorGoogleMaps.disableClustering({\n      id: this.id,\n    });\n  }\n\n  /**\n   * Adds a marker to the map\n   *\n   * @param marker\n   * @returns created marker id\n   */\n  async addMarker(marker: Marker): Promise<string> {\n    const res = await CapacitorGoogleMaps.addMarker({\n      id: this.id,\n      marker,\n    });\n\n    return res.id;\n  }\n\n  /**\n   * Adds multiple markers to the map\n   *\n   * @param markers\n   * @returns array of created marker IDs\n   */\n  async addMarkers(markers: Marker[]): Promise<string[]> {\n    const res = await CapacitorGoogleMaps.addMarkers({\n      id: this.id,\n      markers,\n    });\n\n    return res.ids;\n  }\n\n  /**\n   * Remove marker from the map\n   *\n   * @param id id of the marker to remove from the map\n   * @returns\n   */\n  async removeMarker(id: string): Promise<void> {\n    return CapacitorGoogleMaps.removeMarker({\n      id: this.id,\n      markerId: id,\n    });\n  }\n\n  /**\n   * Remove markers from the map\n   *\n   * @param ids array of ids to remove from the map\n   * @returns\n   */\n  async removeMarkers(ids: string[]): Promise<void> {\n    return CapacitorGoogleMaps.removeMarkers({\n      id: this.id,\n      markerIds: ids,\n    });\n  }\n\n  /**\n   * Destroy the current instance of the map\n   */\n  async destroy(): Promise<void> {\n    if (Capacitor.getPlatform() == 'android') {\n      this.disableScrolling();\n    }\n\n    this.removeAllMapListeners();\n\n    return CapacitorGoogleMaps.destroy({\n      id: this.id,\n    });\n  }\n\n  /**\n   * Update the map camera configuration\n   *\n   * @param config\n   * @returns\n   */\n  async setCamera(config: CameraConfig): Promise<void> {\n    return CapacitorGoogleMaps.setCamera({\n      id: this.id,\n      config,\n    });\n  }\n\n  async getMapType(): Promise<MapType> {\n    const { type } = await CapacitorGoogleMaps.getMapType({ id: this.id });\n    return MapType[type as keyof typeof MapType];\n  }\n\n  /**\n   * Sets the type of map tiles that should be displayed.\n   *\n   * @param mapType\n   * @returns\n   */\n  async setMapType(mapType: MapType): Promise<void> {\n    return CapacitorGoogleMaps.setMapType({\n      id: this.id,\n      mapType,\n    });\n  }\n\n  /**\n   * Sets whether indoor maps are shown, where available.\n   *\n   * @param enabled\n   * @returns\n   */\n  async enableIndoorMaps(enabled: boolean): Promise<void> {\n    return CapacitorGoogleMaps.enableIndoorMaps({\n      id: this.id,\n      enabled,\n    });\n  }\n\n  /**\n   * Controls whether the map is drawing traffic data, if available.\n   *\n   * @param enabled\n   * @returns\n   */\n  async enableTrafficLayer(enabled: boolean): Promise<void> {\n    return CapacitorGoogleMaps.enableTrafficLayer({\n      id: this.id,\n      enabled,\n    });\n  }\n\n  /**\n   * Show accessibility elements for overlay objects, such as Marker and Polyline.\n   *\n   * Only available on iOS.\n   *\n   * @param enabled\n   * @returns\n   */\n  async enableAccessibilityElements(enabled: boolean): Promise<void> {\n    return CapacitorGoogleMaps.enableAccessibilityElements({\n      id: this.id,\n      enabled,\n    });\n  }\n\n  /**\n   * Set whether the My Location dot and accuracy circle is enabled.\n   *\n   * @param enabled\n   * @returns\n   */\n  async enableCurrentLocation(enabled: boolean): Promise<void> {\n    return CapacitorGoogleMaps.enableCurrentLocation({\n      id: this.id,\n      enabled,\n    });\n  }\n\n  /**\n   * Set padding on the 'visible' region of the view.\n   *\n   * @param padding\n   * @returns\n   */\n  async setPadding(padding: MapPadding): Promise<void> {\n    return CapacitorGoogleMaps.setPadding({\n      id: this.id,\n      padding,\n    });\n  }\n\n  /**\n   * Get the map's current viewport latitude and longitude bounds.\n   *\n   * @returns {LatLngBounds}\n   */\n  async getMapBounds(): Promise<LatLngBounds> {\n    return new LatLngBounds(\n      await CapacitorGoogleMaps.getMapBounds({\n        id: this.id,\n      }),\n    );\n  }\n\n  initScrolling(): void {\n    const ionContents = document.getElementsByTagName('ion-content');\n\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < ionContents.length; i++) {\n      (ionContents[i] as any).scrollEvents = true;\n    }\n\n    window.addEventListener('ionScroll', this.handleScrollEvent);\n    window.addEventListener('scroll', this.handleScrollEvent);\n    window.addEventListener('resize', this.handleScrollEvent);\n    if (screen.orientation) {\n      screen.orientation.addEventListener('change', () => {\n        setTimeout(this.updateMapBounds, 500);\n      });\n    } else {\n      window.addEventListener('orientationchange', () => {\n        setTimeout(this.updateMapBounds, 500);\n      });\n    }\n  }\n\n  disableScrolling(): void {\n    window.removeEventListener('ionScroll', this.handleScrollEvent);\n    window.removeEventListener('scroll', this.handleScrollEvent);\n    window.removeEventListener('resize', this.handleScrollEvent);\n    if (screen.orientation) {\n      screen.orientation.removeEventListener('change', () => {\n        setTimeout(this.updateMapBounds, 1000);\n      });\n    } else {\n      window.removeEventListener('orientationchange', () => {\n        setTimeout(this.updateMapBounds, 1000);\n      });\n    }\n  }\n\n  handleScrollEvent = (): void => this.updateMapBounds();\n\n  private updateMapBounds(): void {\n    if (this.element) {\n      const mapRect = this.element.getBoundingClientRect();\n\n      CapacitorGoogleMaps.onScroll({\n        id: this.id,\n        mapBounds: {\n          x: mapRect.x,\n          y: mapRect.y,\n          width: mapRect.width,\n          height: mapRect.height,\n        },\n      });\n    }\n  }\n\n  /*\n  private findContainerElement(): HTMLElement | null {\n    if (!this.element) {\n      return null;\n    }\n\n    let parentElement = this.element.parentElement;\n    while (parentElement !== null) {\n      if (window.getComputedStyle(parentElement).overflowY !== 'hidden') {\n        return parentElement;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    return null;\n  }\n  */\n\n  /**\n   * Set the event listener on the map for 'onCameraIdle' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnCameraIdleListener(\n    callback?: MapListenerCallback<CameraIdleCallbackData>,\n  ): Promise<void> {\n    if (this.onCameraIdleListener) {\n      this.onCameraIdleListener.remove();\n    }\n\n    if (callback) {\n      this.onCameraIdleListener = await CapacitorGoogleMaps.addListener(\n        'onCameraIdle',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onCameraIdleListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onBoundsChanged' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnBoundsChangedListener(\n    callback?: MapListenerCallback<CameraIdleCallbackData>,\n  ): Promise<void> {\n    if (this.onBoundsChangedListener) {\n      this.onBoundsChangedListener.remove();\n    }\n\n    if (callback) {\n      this.onBoundsChangedListener = await CapacitorGoogleMaps.addListener(\n        'onBoundsChanged',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onBoundsChangedListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onCameraMoveStarted' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnCameraMoveStartedListener(\n    callback?: MapListenerCallback<CameraMoveStartedCallbackData>,\n  ): Promise<void> {\n    if (this.onCameraMoveStartedListener) {\n      this.onCameraMoveStartedListener.remove();\n    }\n\n    if (callback) {\n      this.onCameraMoveStartedListener = await CapacitorGoogleMaps.addListener(\n        'onCameraMoveStarted',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onCameraMoveStartedListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onClusterClick' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnClusterClickListener(\n    callback?: MapListenerCallback<ClusterClickCallbackData>,\n  ): Promise<void> {\n    if (this.onClusterClickListener) {\n      this.onClusterClickListener.remove();\n    }\n\n    if (callback) {\n      this.onClusterClickListener = await CapacitorGoogleMaps.addListener(\n        'onClusterClick',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onClusterClickListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onClusterInfoWindowClick' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnClusterInfoWindowClickListener(\n    callback?: MapListenerCallback<ClusterClickCallbackData>,\n  ): Promise<void> {\n    if (this.onClusterInfoWindowClickListener) {\n      this.onClusterInfoWindowClickListener.remove();\n    }\n\n    if (callback) {\n      this.onClusterInfoWindowClickListener =\n        await CapacitorGoogleMaps.addListener(\n          'onClusterInfoWindowClick',\n          this.generateCallback(callback),\n        );\n    } else {\n      this.onClusterInfoWindowClickListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onInfoWindowClick' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnInfoWindowClickListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void> {\n    if (this.onInfoWindowClickListener) {\n      this.onInfoWindowClickListener.remove();\n    }\n\n    if (callback) {\n      this.onInfoWindowClickListener = await CapacitorGoogleMaps.addListener(\n        'onInfoWindowClick',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onInfoWindowClickListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onMapClick' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnMapClickListener(\n    callback?: MapListenerCallback<MapClickCallbackData>,\n  ): Promise<void> {\n    if (this.onMapClickListener) {\n      this.onMapClickListener.remove();\n    }\n\n    if (callback) {\n      this.onMapClickListener = await CapacitorGoogleMaps.addListener(\n        'onMapClick',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onMapClickListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onMarkerClick' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnMarkerClickListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void> {\n    if (this.onMarkerClickListener) {\n      this.onMarkerClickListener.remove();\n    }\n\n    if (callback) {\n      this.onMarkerClickListener = await CapacitorGoogleMaps.addListener(\n        'onMarkerClick',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onMarkerClickListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onMarkerDragStart' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnMarkerDragStartListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void> {\n    if (this.onMarkerDragStartListener) {\n      this.onMarkerDragStartListener.remove();\n    }\n\n    if (callback) {\n      this.onMarkerDragStartListener = await CapacitorGoogleMaps.addListener(\n        'onMarkerDragStart',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onMarkerDragStartListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onMarkerDrag' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnMarkerDragListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void> {\n    if (this.onMarkerDragListener) {\n      this.onMarkerDragListener.remove();\n    }\n\n    if (callback) {\n      this.onMarkerDragListener = await CapacitorGoogleMaps.addListener(\n        'onMarkerDrag',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onMarkerDragListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onMarkerDragEnd' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnMarkerDragEndListener(\n    callback?: MapListenerCallback<MarkerClickCallbackData>,\n  ): Promise<void> {\n    if (this.onMarkerDragEndListener) {\n      this.onMarkerDragEndListener.remove();\n    }\n\n    if (callback) {\n      this.onMarkerDragEndListener = await CapacitorGoogleMaps.addListener(\n        'onMarkerDragEnd',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onMarkerDragEndListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onMyLocationButtonClick' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnMyLocationButtonClickListener(\n    callback?: MapListenerCallback<MyLocationButtonClickCallbackData>,\n  ): Promise<void> {\n    if (this.onMyLocationButtonClickListener) {\n      this.onMyLocationButtonClickListener.remove();\n    }\n\n    if (callback) {\n      this.onMyLocationButtonClickListener =\n        await CapacitorGoogleMaps.addListener(\n          'onMyLocationButtonClick',\n          this.generateCallback(callback),\n        );\n    } else {\n      this.onMyLocationButtonClickListener = undefined;\n    }\n  }\n\n  /**\n   * Set the event listener on the map for 'onMyLocationClick' events.\n   *\n   * @param callback\n   * @returns\n   */\n  async setOnMyLocationClickListener(\n    callback?: MapListenerCallback<MapClickCallbackData>,\n  ): Promise<void> {\n    if (this.onMyLocationClickListener) {\n      this.onMyLocationClickListener.remove();\n    }\n\n    if (callback) {\n      this.onMyLocationClickListener = await CapacitorGoogleMaps.addListener(\n        'onMyLocationClick',\n        this.generateCallback(callback),\n      );\n    } else {\n      this.onMyLocationClickListener = undefined;\n    }\n  }\n\n  /**\n   * Remove all event listeners on the map.\n   *\n   * @param callback\n   * @returns\n   */\n  async removeAllMapListeners(): Promise<void> {\n    if (this.onBoundsChangedListener) {\n      this.onBoundsChangedListener.remove();\n      this.onBoundsChangedListener = undefined;\n    }\n    if (this.onCameraIdleListener) {\n      this.onCameraIdleListener.remove();\n      this.onCameraIdleListener = undefined;\n    }\n    if (this.onCameraMoveStartedListener) {\n      this.onCameraMoveStartedListener.remove();\n      this.onCameraMoveStartedListener = undefined;\n    }\n\n    if (this.onClusterClickListener) {\n      this.onClusterClickListener.remove();\n      this.onClusterClickListener = undefined;\n    }\n\n    if (this.onClusterInfoWindowClickListener) {\n      this.onClusterInfoWindowClickListener.remove();\n      this.onClusterInfoWindowClickListener = undefined;\n    }\n\n    if (this.onInfoWindowClickListener) {\n      this.onInfoWindowClickListener.remove();\n      this.onInfoWindowClickListener = undefined;\n    }\n\n    if (this.onMapClickListener) {\n      this.onMapClickListener.remove();\n      this.onMapClickListener = undefined;\n    }\n\n    if (this.onMarkerClickListener) {\n      this.onMarkerClickListener.remove();\n      this.onMarkerClickListener = undefined;\n    }\n\n    if (this.onMyLocationButtonClickListener) {\n      this.onMyLocationButtonClickListener.remove();\n      this.onMyLocationButtonClickListener = undefined;\n    }\n\n    if (this.onMyLocationClickListener) {\n      this.onMyLocationClickListener.remove();\n      this.onMyLocationClickListener = undefined;\n    }\n  }\n\n  private generateCallback(\n    callback: MapListenerCallback<any>,\n  ): MapListenerCallback<any> {\n    const mapId = this.id;\n    return (data: any) => {\n      if (data.mapId == mapId) {\n        callback(data);\n      }\n    };\n  }\n}\n"]}